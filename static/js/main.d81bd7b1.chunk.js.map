{"version":3,"sources":["components/button/button.js","components/loading/loading.js","components/search/search.js","components/table/sort/sort.js","components/table/table.js","components/app/app.js","serviceWorker.js","index.js"],"names":["Component","Loading","react_default","a","createElement","Button","_ref","onClick","className","type","children","ButtonWithLoading","_ref2","isLoading","rest","Object","objectWithoutProperties","loading","defaultProps","Search","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","input","React","createRef","current","focus","_this$props","props","value","onChange","onSubmit","ref","button_Button","Sort","sortKey","onSort","activeSortKey","sortClass","classNames","button-active","SORTS","NONE","list","TITLE","sortBy","AUTHOR","COMMENTS","reverse","POINTS","Table","state","isSortReverse","bind","assertThisInitialized","setState","onDismiss","_this$state","sortedList","reverseSortedList","style","width","sort","map","item","key","objectID","href","url","title","author","num_comments","points","DEFAULT_QUERY","concat","App","_isMounted","results","searchKey","searchTerm","error","needsToSearchTopStories","setSearchTopStories","fetchSearchTopStories","onSearchSubmit","onSearchChanged","result","hits","page","prevState","oldHits","updatedHits","toConsumableArray","objectSpread","defineProperty","updateSearchTopStoriesState","_this2","arguments","length","undefined","Axios","then","data","catch","event","preventDefault","_results$searchKey","updatedList","filter","target","_this3","_this$state2","search","table","Boolean","window","location","hostname","match","ReactDOM","render","app_app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d81bd7b1.chunk.js","sourcesContent":["/* eslint-disable react/display-name */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Loading from '../loading/loading'\n\nconst Button = ({ onClick, className, type, children }) =>\n  <button\n    onClick={onClick}\n    className={className}\n    type={type}\n  >\n    {children}\n  </button>\n  \n\nconst withLoading = (Component) => ({ isLoading, ...rest }) =>\n  isLoading\n    ? <Loading />\n    : <Component { ...rest } />\n\nconst ButtonWithLoading = withLoading(Button)\n\nButton.propTypes = {\n  onClick: PropTypes.func,\n  className: PropTypes.string,\n  type: PropTypes.string,\n  children: PropTypes.node.isRequired\n}\n\nButton.defaultProps = {\n  onClick: null,\n  className: ''\n}\n\nexport { Button, ButtonWithLoading }\n","import React from 'react'\n\nconst Loading = () => <div>Loading ...</div>\n\nexport default Loading\n","import React, { Component } from 'react'\nimport { Button } from '../button/button'\nimport PropTypes from 'prop-types'\n\n// Stateless functional component\n// It does not need access to state or lifecycle methods\nclass Search extends Component {\n  constructor() {\n    super()\n\n    this.input = React.createRef()\n  }\n\n  componentDidMount() {\n    if(this.input && this.input.current) {\n      this.input.current.focus()\n    }\n  }\n\n  render() {\n    const {\n      value,\n      onChange,\n      onSubmit,\n      children\n    } = this.props\n\n    Search.propTypes = {\n      value: PropTypes.string,\n      onChange: PropTypes.func,\n      onSubmit: PropTypes.func,\n      children: PropTypes.node.isRequired,\n    }\n\n    return (\n      <form onSubmit={onSubmit}>\n        {children}\n        <input\n          type='text'\n          value={value}\n          onChange={onChange}\n          ref={this.input}\n        />\n        <Button\n          className='button'\n          type='submit'>\n          {children}\n        </Button>\n      </form>\n    )\n  }\n}\nexport default Search\n","import React from 'react'\nimport { Button } from '../../button/button'\nimport classNames from 'classnames'\nimport PropTypes from 'prop-types'\n\nconst Sort = ({ sortKey, onSort, children, activeSortKey }) => {\n  const sortClass = classNames(\n    'button-inline',\n    { 'button-active': sortKey === activeSortKey }\n  )\n\n  Sort.propTypes = {\n    sortKey: PropTypes.string,\n    onSort: PropTypes.func,\n    children: PropTypes.string,\n    activeSortKey: PropTypes.string\n  }\n\n  return(\n    <Button\n      onClick={() => onSort(sortKey)}\n      className={sortClass}\n    >\n      {children}\n    </Button>\n  )\n}\n\nexport default Sort\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { sortBy } from 'lodash'\nimport { Button } from '../button/button'\nimport Sort from './sort/sort'\n\nconst SORTS = {\n  NONE: list => list,\n  TITLE: list => sortBy(list, 'title'),\n  AUTHOR: list => sortBy(list, 'author'),\n  COMMENTS: list => sortBy(list, 'num_comments').reverse(),\n  POINTS: list => sortBy(list, 'points').reverse(),\n}\n\nclass Table extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      sortKey: 'NONE',\n      isSortReverse: false\n    }\n    this.onSort = this.onSort.bind(this)\n  }\n\n  onSort(sortKey) {\n    const isSortReverse = this.state.sortKey === sortKey && !this.state.isSortReverse\n    this.setState({ sortKey, isSortReverse })\n  }\n\n  render() {\n    const { \n      list,\n      onDismiss\n    } = this.props\n\n    const {\n      sortKey,\n      isSortReverse,\n    } = this.state\n\n    Table.propTypes = {\n      list: PropTypes.arrayOf(\n        PropTypes.shape({\n          objectID: PropTypes.string.isRequired,\n          author: PropTypes.string,\n          url: PropTypes.string,\n          num_comments: PropTypes.number,\n          points: PropTypes.number,\n        })\n      ).isRequired,\n      onDismiss: PropTypes.func,\n      sortKey: PropTypes.string,\n      onSort: PropTypes.func,\n      isSortReverse: PropTypes.bool\n    }\n\n    const sortedList = SORTS[sortKey](list)\n    const reverseSortedList = isSortReverse\n      ? sortedList.reverse()\n      : sortedList\n\n    return (\n      <div className='table'>\n        <div className=\"table-header\">\n          <span style={{ width: '40%' }}>\n            <Sort\n              sortKey={'TITLE'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            > \n              Title\n            </Sort>\n          </span>\n          <span style={{ width: '30%' }}>\n            <Sort\n              sortKey={'AUTHOR'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Author\n            </Sort>\n          </span>\n          <span style={{ width: '10%' }}>\n            <Sort\n              sortKey={'COMMENTS'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            > \n              Comments\n            </Sort>\n          </span>\n          <span style={{ width: '10%' }}>\n            <Sort\n              sortKey={'POINTS'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Points\n            </Sort>\n          </span>\n          <span style={{ width: '10%' }}>\n            Archive\n          </span>\n        </div>\n        {reverseSortedList.map(item =>\n          <div key={item.objectID} className='table-row'>\n            <span><a href={item.url}>{item.title}</a></span>\n            <span>{item.author}</span>\n            <span>{item.num_comments}</span>\n            <span>{item.points}</span>\n            <span>\n              <Button \n                onClick={() => onDismiss(item.objectID)} \n                className='button-inline'\n                type='button'>\n                Dismiss\n              </Button>\n            </span>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Table\n","/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react'\nimport Axios from 'axios'\nimport './app.css'\nimport Search from '../search/search'\nimport Table from '../table/table.js'\nimport { ButtonWithLoading } from '../button/button'\n\nconst DEFAULT_QUERY = 'redux'\nconst DEFAULT_HPP = '10'\nconst PATH_BASE = 'https://hn.algolia.com/api/v1'\nconst PATH_SEARCH = '/search'\nconst PARAM_SEARCH = 'query='\nconst PARAM_PAGE = 'page='\nconst PARAM_HPP = 'hitsPerPage='\nconst url = `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}`\n\n// higher-order function\nconst updateSearchTopStoriesState = (hits, page) => (prevState) => {\n  const { searchKey, results } = prevState\n\n  const oldHits = results && results[searchKey]\n    ? results[searchKey].hits\n    : []\n\n  const updatedHits = [\n    ...oldHits,\n    ...hits\n  ]\n\n  return {\n    results: {\n      ...results,\n      [searchKey]: { hits: updatedHits, page }\n    },\n    isLoading: false\n  }\n}\n\nclass App extends Component {\n  _isMounted = false\n\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      results: null,\n      searchKey: '',\n      searchTerm: DEFAULT_QUERY,\n      error: null,\n      isLoading: false\n    }\n\n    this.needsToSearchTopStories = this.needsToSearchTopStories.bind(this)\n    this.setSearchTopStories = this.setSearchTopStories.bind(this)\n    this.fetchSearchTopStories = this.fetchSearchTopStories.bind(this)\n    this.onSearchSubmit = this.onSearchSubmit.bind(this)\n    this.onDismiss = this.onDismiss.bind(this)\n    this.onSearchChanged = this.onSearchChanged.bind(this)\n  }\n\n  onSort(sortKey) {\n    const isSortReverse = this.state.sortKey === sortKey && !this.state.isSortReverse\n    this.setState({ sortKey, isSortReverse })\n  }\n\n  needsToSearchTopStories(searchTerm) {\n    return !this.state.results[searchTerm]\n  }\n\n  setSearchTopStories(result) {\n    const { hits, page } = result\n    this.setState(updateSearchTopStoriesState(hits, page))\n  }    \n\n  fetchSearchTopStories(searchTerm, page = 0) {\n    this.setState({ isLoading: true })\n\n    Axios(`${url}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\n      .then(result => this._isMounted && this.setSearchTopStories(result.data))\n      .catch(error => this._isMounted && this.setState({ error }))\n  }\n\n  onSearchSubmit(event) {\n    const { searchTerm } = this.state\n\n    if (this.needsToSearchTopStories(searchTerm)) {\n      this.fetchSearchTopStories(searchTerm)\n    }\n\n    event.preventDefault()\n  }\n\n  onDismiss (objectID) {\n    const { searchKey, results } = this.state\n    const { hits, page } = results[searchKey]\n\n    const updatedList = hits.filter(item => item.objectID !== objectID)\n\n    // object spread operator\n    this.setState({\n      results: {\n        ...results,\n        [searchKey]: { hits: updatedList, page }\n      }\n    })\n  }\n\n  onSearchChanged (event) {\n    this.setState({ searchTerm: event.target.value })\n  }\n\n  // lifecycle method\n  componentDidMount() {\n    this._isMounted = true\n    const { searchTerm } = this.state\n    this.setState({ searchKey: searchTerm })\n    this.fetchSearchTopStories(searchTerm)\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false\n  }\n\n  render () {\n    const {\n      searchTerm,\n      results,\n      searchKey,\n      error,\n      isLoading\n    } = this.state\n    \n    const page = (\n      results &&\n      results[searchKey] &&\n      results[searchKey].page\n    ) || 0\n\n    const list = (\n      results &&\n      results[searchKey] &&\n      results[searchKey].hits\n    ) || []\n\n    return (\n      <div className='page'>\n        <div className='interactions'>\n          <Search\n            value={searchTerm}\n            onChange={this.onSearchChanged}\n            onSubmit={this.onSearchSubmit}\n          >\n            Search\n          </Search>\n        </div>\n        { error\n          ? <div className='interactions'>\n            <p>Something went wrong.</p>\n          </div>         \n          : <Table\n            list={list}\n            onDismiss={this.onDismiss}\n          />\n        }\n        <div className='interactions'>\n          <ButtonWithLoading\n            onClick={()=> this.fetchSearchTopStories(searchKey, page + 1)}\n            className='button'\n            type='button'\n            isLoading={isLoading}\n          >\n            <span>More</span>\n          </ButtonWithLoading>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable no-unused-vars */\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/app/app.js'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n\n// Hot Module Replacement (HMR) is a tool to reload your application in the browser\n// The browser does not perform a page refresh\nif (module.hot) {\n  module.hot.accept()\n}\n"],"sourceRoot":""}